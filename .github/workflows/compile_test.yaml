name: Compilation Testing for DYAD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  compile-flux:
    strategy:
      fail-fast: false
      matrix:
        flux: [ 0.52.0, 0.49.0]
        mode: ["FLUX_RPC", "UCX"]
        os: [ ubuntu-20.04 ]
        compiler: [ gcc ]
        gcc: [ 10 ]
    name: ${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.gcc }}-${{ matrix.flux }}-${{ matrix.mode }}
    runs-on: ${{ matrix.os }} # Docker-based jobs must run on Ubuntu
    env:
      FLUX_VERSION: ${{ matrix.flux }}
      CC: gcc-${{ matrix.gcc }}
      CXX: g++-${{ matrix.gcc }}
      SPACK_DIR: "/home/runner/work/spack"
      DYAD_INSTALL_PREFIX: "/home/runner/work/dyad/install"
      DYAD_KVS_NAMESPACE: "test"
      DYAD_DTL_MODE: ${{ matrix.mode }}
      DYAD_PATH: "/home/runner/work/dyad/temp/"
    steps:
      - name: Push checkout
        if: github.event_name == 'push'
        uses: actions/checkout@v3
      - name: PR checkout
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: ${{ matrix.gcc }}
      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends  \
                              gcc g++ gfortran \
                              cmake \
                              autoconf \
                              automake \
                              libtool \
                              libtool-bin \
                              openmpi-bin \
                              libopenmpi-dev \
                              libarchive-dev \
                              ncurses-bin \
                              hwloc \
                              lua5.3 liblua5.3-dev \
                              python3 \
                              libczmq-dev \
                              lua-posix-dev \
                              lz4 \
                              pkgconf \
                              libzmq5 \
                              sqlite
          sudo pip install jsonschema cffi ply pyyaml
          sudo chmod 777 /usr -R
      - name: Install Spack
        run: |
          git clone https://github.com/spack/spack.git ${SPACK_DIR}
      - name: Load existing dependencies
        run: |
          . ${SPACK_DIR}/share/spack/setup-env.sh
          mkdir -p /home/runner/.spack
          cat > /home/runner/.spack/packages.yaml << 'EOF'
          packages:
            all:
              target: [x86_64]
              providers:
                mpi: [openmpi]
            python:
              buildable: False
              externals:
                - spec: "python@3.10.12"
                  prefix: /usr
            py-cffi:
              buildable: False
              externals:
                - spec: "py-cffi@1.15.1"
                  prefix: /usr
            py-jsonschema:
              buildable: False
              externals:
                - spec: "py-jsonschema@4.17.3"
                  prefix: /usr
            py-ply:
              buildable: False
              externals:
                - spec: "py-ply@3.11"
                  prefix: /usr
            py-pyyaml:
              buildable: False
              externals:
                - spec: "py-pyyaml@6.0"
                  prefix: /usr
            czmq:
              buildable: False
              externals:
                - spec: "czmq@4.2.1"
                  prefix: /usr
            sqlite:
              buildable: False
              externals:
                - spec: "sqlite@3.37.2"
                  prefix: /usr
            libzmq:
              buildable: False
              externals:
                - spec: "libzmq@4.3.4"
                  prefix: /usr
            lua:
              buildable: False
              externals:
                - spec: "lua@5.3.6"
                  prefix: /usr
            lua-luaposix:
              buildable: False
              externals:
                - spec: "lua-luaposix@33.4.0"
                  prefix: /usr
            lz4:
              buildable: False
              externals:
                - spec: "lz4@1.9.3"
                  prefix: /usr
            ncurses:
              buildable: False
              externals:
                - spec: "ncurses@6.3.2"
                  prefix: /usr
            pkgconf:
              buildable: False
              externals:
                - spec: "pkgconf@1.8.0"
                  prefix: /usr
            hwloc:
              buildable: False
              externals:
                - spec: "hwloc@2.7.0"
                  prefix: /usr
            libarchive:
              buildable: False
              externals:
                - spec: "libarchive@3.6.0"
                  prefix: /usr
            autoconf:
              buildable: False
              externals:
                - spec: "autoconf@2.69"
                  prefix: /usr
            automake:
              buildable: False
              externals:
                - spec: "automake@1.16.1"
                  prefix: /usr
            libtool:
              buildable: False
              externals:
                - spec: "libtool@2.4.6"
                  prefix: /usr
            m4:
              buildable: False
              externals:
                - spec: "m4@1.4.18"
                  prefix: /usr
            openmpi:
              buildable: False
              externals:
                - spec: "openmpi@4.0.3"
                  prefix: /usr
            openssl:
              buildable: False
              externals:
                - spec: "openssl@1.1.1f"
                  prefix: /usr
            pkg-config:
              buildable: False
              externals:
                - spec: "pkg-config@0.29.1"
                  prefix: /usr
          EOF
          spack compiler find --scope=user
          if [[ $CC == 'gcc-10' ]]; then
              spack config add "packages:all:compiler:[gcc@10.3.0]"
          else
              spack config add "packages:all:compiler:[gcc@9.3.0]"
          fi
          spack external find
          spack spec flux-core@${FLUX_VERSION}
          if [[ $DYAD_DTL_MODE == 'UCX' ]]; then
            spack spec ucx@1.13.1
          fi
      - name: Install dependencies
        run: |
          . ${SPACK_DIR}/share/spack/setup-env.sh
          spack install -j4 flux-core@${FLUX_VERSION}
          if [[ $DYAD_DTL_MODE == 'UCX' ]]; then
            spack install -j4 ucx@1.13.1
          fi
          mkdir -p ${DYAD_INSTALL_PREFIX}
          spack view --verbose symlink ${DYAD_INSTALL_PREFIX} flux-core@${FLUX_VERSION}
          if [[ $DYAD_DTL_MODE == 'UCX' ]]; then
            spack view --verbose symlink ${DYAD_INSTALL_PREFIX} ucx@1.13.1
          fi
      - name: Compile DYAD
        run: |
          echo "Activating spack"
          . ${SPACK_DIR}/share/spack/setup-env.sh
          echo "Install DYAD"
          cd ${GITHUB_WORKSPACE}
          ls
          pwd
          mkdir build
          cd build
          export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:${DYAD_INSTALL_PREFIX}/lib/pkgconfig
          CONFIGURE_FLAGS="-DDYAD_PROFILER=NONE"
          if [[ $DYAD_DTL_MODE == 'UCX' ]]; then
            CONFIGURE_FLAGS="-DDYAD_ENABLE_UCX_DATA=ON -DDYAD_PROFILER=NONE"
          fi
          TEST_CONF="-DDYAD_LIBDIR_AS_LIB:BOOL=ON -DCMAKE_BUILD_TYPE=Debug"
          cmake --version
          cmake -DCMAKE_INSTALL_PREFIX=${DYAD_INSTALL_PREFIX} ${CONFIGURE_FLAGS} ${TEST_CONF} ..
          make VERBOSE=1 install -j
      - name: Install PyDYAD
        run: |
          cd ${GITHUB_WORKSPACE}/pydyad
          python3 -m pip install -e .
          cd ${GITHUB_WORKSPACE}
      - name: Install Test
        run: |
          . ${SPACK_DIR}/share/spack/setup-env.sh
          export LD_LIBRARY_PATH=${DYAD_INSTALL_PREFIX}/lib:${LD_LIBRARY_PATH}
          export CFLAGS="-I${DYAD_INSTALL_PREFIX}/include"
          export CXXFLAGS="-I${DYAD_INSTALL_PREFIX}/include"
          export LDFLAGS="-L${DYAD_INSTALL_PREFIX}/lib"
          cd ${GITHUB_WORKSPACE}/docs/demos/ecp_feb_2023
          make all
      - name: Test DYAD with DLIO benchmark
        run: |
          #mkdir -p $DYAD_PATH
          . ${SPACK_DIR}/share/spack/setup-env.sh
          export PATH=${PATH}:${DYAD_INSTALL_PREFIX}/bin:${DYAD_INSTALL_PREFIX}/sbin
          export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${DYAD_INSTALL_PREFIX}/lib
          export PYTHONPATH=${GITHUB_WORKSPACE}/tests/integration/dlio_benchmark:${GITHUB_WORKSPACE}/pydyad:$PYTHONPATH
          python3 -m pip install -r ${GITHUB_WORKSPACE}/tests/integration/dlio_benchmark/requirements.txt
          python3 -m pip install --force-reinstall dlio_profiler_py
          echo "Starting flux brokers"
          cd ${GITHUB_WORKSPACE}/tests/integration/dlio_benchmark
          flux start --test-size=2 /bin/bash ./script.sh ${GITHUB_WORKSPACE} ${DYAD_INSTALL_PREFIX}
      - name: Test DYAD with separate FS c
        run: |
          mkdir -p $DYAD_PATH
          . ${SPACK_DIR}/share/spack/setup-env.sh
          export PATH=${PATH}:${DYAD_INSTALL_PREFIX}/bin:${DYAD_INSTALL_PREFIX}/sbin
          export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${DYAD_INSTALL_PREFIX}/lib
          echo "Starting flux brokers"
          flux start --test-size=2 /bin/bash ${GITHUB_WORKSPACE}/.github/prod-cons/dyad_prod_cons_test.sh "c"
      - name: Test DYAD with separate FS cpp
        run: |
          mkdir -p $DYAD_PATH
          . ${SPACK_DIR}/share/spack/setup-env.sh
          export PATH=${PATH}:${DYAD_INSTALL_PREFIX}/bin:${DYAD_INSTALL_PREFIX}/sbin
          export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${DYAD_INSTALL_PREFIX}/lib
          echo "Starting flux brokers"
          flux start --test-size=2 /bin/bash ${GITHUB_WORKSPACE}/.github/prod-cons/dyad_prod_cons_test.sh "cpp"
      - name: Test DYAD with separate FS python
        run: |
          mkdir -p $DYAD_PATH
          . ${SPACK_DIR}/share/spack/setup-env.sh
          export PATH=${PATH}:${DYAD_INSTALL_PREFIX}/bin:${DYAD_INSTALL_PREFIX}/sbin
          export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${DYAD_INSTALL_PREFIX}/lib
          echo "Starting flux brokers"
          flux start --test-size=2 /bin/bash ${GITHUB_WORKSPACE}/.github/prod-cons/dyad_prod_cons_test.sh "python"

