#!/bin/bash
#MSUB -l @JOB_NODES@
#MSUB -l walltime=0:30:00
#MSUB -lgres=ignore
#MSUB -q pbatch
#MSUB -V
#MSUB -N dyad-merlin

@JOB_NODES@

# start merlin
pushd ~/Merlin
source start_merlin.txt
popd
sleep 3

num_of_jobs=5
num_events_per_file=12


# set variables
check_interval=10

# set workflow spec file
if [ @WORK@ == s ] ; then
  spec=separate_steps.${nodes}.yaml
elif [ @WORK@ == d ] ; then
  spec=dependent_step.${nodes}.yaml
fi

rm -rf 0 1 2 3 content.sqlite

# first run
merlin run ${spec}
merlin run-workers ${spec}

sleep ${check_interval}

outd=`ls -1t ${spec} | cut -d '.' -f 1 | head -n 1`
outd=`ls -1td ${outd}_2020* 2> /dev/null | head -n 1`

# wait until the run completes
while [ "${outd}" != "" ] ; do
   if [ -d ${outd} ] && [ -f ${outd}/flux_info/MERLIN_FINISHED ] ; then
       echo "${outd} complete!"
       break
   fi
   sleep ${check_interval}
done


# more runs
if [ ${num_of_jobs} -gt 1 ] ; then
    for i in `seq 2 ${num_of_jobs} `
    do
        rm -rf 0 1 2 3 content.sqlite
        merlin run ${spec}

        sleep ${check_interval}

        outd=`ls -1t ${spec} | cut -d '.' -f 1 | head -n 1`
        outd=`ls -1td ${outd}_2020* 2> /dev/null | head -n 1`

        # wait until the run completes
        while [ "${outd}" != "" ] ; do
           if [ -d ${outd} ] && [ -f ${outd}/flux_info/MERLIN_FINISHED ] ; then
               echo "${outd} complete!"
               break
           fi
           sleep ${check_interval}
       done
    done
fi

merlin stop-workers
sleep 5
~/Merlin/redis-install-${SYS_TYPE}/bin/redis-cli shutdown
sleep 5
stty sane
