description:
  description: DYAD to support running ensemble jobs of producers and consumers
  name: separate_steps

batch:
  type: flux
  nodes: @NODES@
  queue: pbatch
  #flux_start_opts: -o,-S,log-filename=flux_log-separate_steps.out
  #flux_start_opts: -o,--k-ary=@NODES@
  #flux_start_opts: -o,--k-ary=@NODES@,-Srundir=.

env:
  variables:
    SYNC: 0
    ITER: @ITER@
    KVS_NS: prod-cons
    DYAD_INSTALL_PATH: @DYAD_INSTALL_PATH@
    DYAD_KVS_DEPTH: 2
    DYAD_KVS_BINS: 256
    #SHARED_FS: '--shared_fs'
    SHARED_FS: "${DUMMY}"
    FIXED_FILE_SIZE: '--fixed_fsize @NUM_FILES_PER_ITER@ 52428800'
    #FIXED_FILE_SIZE: "${DUMMY}"
    SLEEP: '--usec 100000'
    # An empty variable will make Merlin hang.
    # A variable cannot be null string, or whitespace.
    # Here, DUMMY is not defined, and thus it's value is empty.
    # However, we still need it only to avoid assigning whitespace

study:
- description: Start DYAD
  name: startup
  run:
    cmd: |
      export DYAD_ARGS_PARSER_PATH=$(SPECROOT)/user_apps/args.sh
      $(SPECROOT)/dyad/dyad_startup.sh \
                  --workspace $(WORKSPACE) --specroot $(SPECROOT) \
                  --sync $(SYNC) $(SHARED_FS) \
                  --mpath $(DYAD_INSTALL_PATH)/src/modules/dyad.so \
                  --verbose >& $(WORKSPACE)/start.out
      flux kvs namespace create $(KVS_NS)
      date +"%T.%3N" > $(MERLIN_WORKSPACE)/time.txt
    task_queue: separate_steps
    nodes: 1
    procs: 1
    cores per task: 1

- description: producer
  name: runs-prod
  run:
    cmd: |
      if [  ! -z ${FLUX_PMI_LIBRARY_PATH+x} ]; then
        FPMI2LIB=`dirname ${FLUX_PMI_LIBRARY_PATH}`/libpmi2.so
        if [ -e ${FPMI2LIB} ]; then 
          if [  ! -z ${LD_PRELOAD+x} ]; then
            export LD_PRELOAD=${LD_PRELOAD}:${FPMI2LIB}
          else
            export LD_PRELOAD=${FPMI2LIB}
          fi
        fi
      fi
      hostname >> $(WORKSPACE)/hostname.$(CONTEXT).txt
      export DYAD_ARGS_PARSER_PATH=$(SPECROOT)/user_apps/args.sh
      date +"%T.%3N" >> $(WORKSPACE)/time.$(CONTEXT).txt
      $(LAUNCHER) $(SPECROOT)/user_apps/step_prod.sh \
                  --workspace $(WORKSPACE) --specroot $(SPECROOT) \
                  --wpath $(DYAD_INSTALL_PATH)/src/wrapper/dyad_wrapper.so \
                  --kvs_namespace $(KVS_NS) --context $(CONTEXT) \
                  --depth $(DYAD_KVS_DEPTH) --bins $(DYAD_KVS_BINS) \
                  --sync $(SYNC) $(SHARED_FS) --iter $(ITER) \
                  $(FIXED_FILE_SIZE) \
                  --verbose >& $(WORKSPACE)/runs.$(CONTEXT).out
      date +"%T.%3N" >> $(WORKSPACE)/time.$(CONTEXT).txt
    depends: [startup]
    task_queue: separate_steps
    nodes: 1
    procs: 1
    cores per task: @CORES_PER_TASK@

- description: consumer
  name: runs-cons
  run:
    cmd: |
      if [  ! -z ${FLUX_PMI_LIBRARY_PATH+x} ]; then
        FPMI2LIB=`dirname ${FLUX_PMI_LIBRARY_PATH}`/libpmi2.so
        if [ -e ${FPMI2LIB} ]; then 
          if [  ! -z ${LD_PRELOAD+x} ]; then
            export LD_PRELOAD=${LD_PRELOAD}:${FPMI2LIB}
          else
            export LD_PRELOAD=${FPMI2LIB}
          fi
        fi
      fi
      hostname >> $(WORKSPACE)/hostname.$(CONTEXT).txt
      export DYAD_ARGS_PARSER_PATH=$(SPECROOT)/user_apps/args.sh
      date +"%T.%3N" >> $(WORKSPACE)/time.$(CONTEXT).txt
      $(LAUNCHER) $(SPECROOT)/user_apps/step_cons.sh \
                  --workspace $(WORKSPACE) --specroot $(SPECROOT) \
                  --wpath $(DYAD_INSTALL_PATH)/src/wrapper/dyad_wrapper.so \
                  --kvs_namespace $(KVS_NS) --context $(CONTEXT) \
                  --depth $(DYAD_KVS_DEPTH) --bins $(DYAD_KVS_BINS) \
                  --sync $(SYNC) $(SHARED_FS) --iter $(ITER) \
                  $(FIXED_FILE_SIZE) \
                  --verbose --check >& $(WORKSPACE)/runs.$(CONTEXT).out
      date +"%T.%3N" >> $(WORKSPACE)/time.$(CONTEXT).txt
    depends: [startup]
    task_queue: separate_steps
    nodes: 1
    procs: 1
    cores per task: @CORES_PER_TASK@

- description: Dump flux info
  name: flux_info
  run:
    cmd: |
      date +"%T.%3N" >> $(MERLIN_WORKSPACE)/time.txt
      flux kvs dir -R >& $(WORKSPACE)/flux_kvs_dir.out
      flux kvs namespace list > $(WORKSPACE)/flux_kvs_namespace_list.txt
      flux kvs namespace remove $(KVS_NS)
      flux kvs namespace list > $(WORKSPACE)/flux_kvs_namespace_list_cleanup.txt
      flux hwloc info > $(WORKSPACE)/hwlocinfo.txt
    depends: [runs-prod*, runs-cons*]
    task_queue: separate_steps

merlin:
  resources:
    task_server: celery
    workers:
      simworkers:
        args: -l INFO --concurrency @CONC@ --prefetch-multiplier 1 -Ofair
        steps: [runs-prod, runs-cons, flux_info]
        nodes: @NODES@
  samples:
    column_labels: [CONTEXT]
    file: $(MERLIN_INFO)/context.csv
    generate:
      cmd: |
        if [ "$(SHARED_FS)" == "" ] ; then
            seq 1 @NUM_TASKS_PER_TYPE@ > $(MERLIN_INFO)/context.csv
        else
            seq 1 @NUM_TASKS_PER_TYPE@ | awk -v ts=$(MERLIN_TIMESTAMP) \
                '{printf("%s_%s\n", ts, $0)}' > $(MERLIN_INFO)/context.csv
        fi
