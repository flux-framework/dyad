if (NOT DYAD_CONFIG_LOADED)
    set(DYAD_PROJECT_NAME "@PROJECT_NAME@")
    set(DYAD_CONTROL_PLANE "@DYAD_CONTROL_PLANE@")
    set(DYAD_DATA_PLANE "@DYAD_DATA_PLANE@")
    set(DYAD_PROFILER "@DYAD_PROFILER@")

    set(DYAD_INCLUDE_DIRS "@DYAD_INSTALL_INCLUDE_DIR@")
    if (NOT IS_DIRECTORY "${DYAD_INCLUDE_DIRS}")
        set(DYAD_FOUND FALSE)
    endif ()
    get_filename_component(DYAD_ROOT_DIR ${DYAD_INCLUDE_DIRS}/.. ABSOLUTE)
    set(DYAD_LIBRARY_PATH "@DYAD_INSTALL_LIB_DIR@")
    set(DYAD_CMAKE_DIR "${DYAD_LIBRARY_PATH}/cmake/${DYAD_PROJECT_NAME}")
    # TODO: change so that this isn't hardcoded
    set(DYAD_LIBRARIES dyad_fstream)
    
    list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}")
    
    include(CMakeFindDependencyMacro)
    
    find_dependency(PkgConfig REQUIRED)
    find_dependency(FluxCore REQUIRED)
    find_dependency(Jansson 2.10 REQUIRED)
    
    if (DYAD_PROFILER STREQUAL "PERFFLOW_ASPECT")
        find_dependency(perfflowaspect REQUIRED)
    endif ()
    if (DYAD_PROFILER STREQUAL "CALIPER")
        find_dependency(caliper REQUIRED)
    endif ()
    if (DYAD_DATA_PLANE STREQUAL "UCX")
        find_dependency(ucx 1.6 REQUIRED)
    endif ()
    
    include("${DYAD_CMAKE_DIR}/dyad-targets.cmake")
    
    set(DYAD_FOUND TRUE)

    include(FindPackageHandleStandardArgs)
    find_package_handle_standard_args(dyad
                REQUIRED_VARS DYAD_FOUND DYAD_INCLUDE_DIRS DYAD_LIBRARIES)
endif ()

# set(DYAD_FOUND TRUE)
# 
# # Include directories
# set(DYAD_INCLUDE_DIRS "@DYAD_INSTALL_INCLUDE_DIR@")
# if (NOT IS_DIRECTORY "${DYAD_INCLUDE_DIRS}")
#     set(DYAD_FOUND FALSE)
# endif ()
# 
# include("${CMAKE_CURRENT_LIST_DIR}/dyad-targets.cmake")
# 
# #message(STATUS "DYAD_INCLUDE_DIRS: " ${DYAD_INCLUDE_DIRS})
# get_filename_component(DYAD_ROOT_DIR ${DYAD_INCLUDE_DIRS}/.. ABSOLUTE)
# #message(STATUS "DYAD_ROOT_DIR: " ${DYAD_ROOT_DIR})
# set(DYAD_LIBRARY_PATH "@DYAD_INSTALL_LIB_DIR@")
# link_directories(${DYAD_LIBRARY_PATH})
# set(DYAD_LIBRARIES dyad)
# set(DYAD_DEFINITIONS "")
# add_library(dyad INTERFACE)
# add_library(dyad::dyad ALIAS dyad)
# target_include_directories(dyad INTERFACE ${DYAD_INCLUDE_DIRS})
# target_link_libraries(dyad INTERFACE ${DYAD_LIBRARIES})
# target_compile_options(dyad INTERFACE ${DYAD_DEFINITIONS})
# include(FindPackageHandleStandardArgs)
# find_package_handle_standard_args(dyad
#             REQUIRED_VARS DYAD_FOUND DYAD_INCLUDE_DIRS DYAD_LIBRARIES)